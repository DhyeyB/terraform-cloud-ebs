name: Deploy to Amazon EBS

on:
  push:
    branches: ["main", "staging"]

permissions:
  contents: read

jobs:
  infra-deploy:
    name: Infrastructure Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "${{ secrets.ACCESS_KEY }}"
          aws-secret-access-key: "${{ secrets.SECRET_KEY }}"
          aws-region: "${{ secrets.AWS_REGION }}"

      - name: Get Terraform Variables
        env:
          aws-access-key-id: "${{ secrets.ACCESS_KEY }}"
          aws-secret-access-key: "${{ secrets.SECRET_KEY }}"
        run: |
          mkdir .aws
          cd .aws
          printf "[default] \n aws_access_key_id = %s \n aws_secret_access_key = %s" ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }} > credentials

      - name: Terraform Initialization
        run: |
          pwd
          terraform init -var="access_key=${{ secrets.ACCESS_KEY }}" -var="secret_key=${{ secrets.SECRET_KEY }}"

      - id: terraform-apply
        name: Terraform Apply
        run: |
          terraform destroy -auto-approve -var="access_key=${{ secrets.ACCESS_KEY }}" -var="secret_key=${{ secrets.SECRET_KEY }}"

    #   - name: Wait for EC2 instance readiness and userdata completion
    #     run: |
    #       instance_id=$(terraform output ec2_instance_id | sed 's/"//g')
    #       status=""
    #       while [ "$status" != "running" ]; do
    #       status=$(aws ec2 describe-instances --instance-ids $instance_id --query "Reservations[0].Instances[0].State.Name" --output text)
    #       if [ "$status" != "running" ]; then
    #           echo "Instance not yet running, waiting..."
    #           sleep 10
    #       else
    #           echo "Instance is in running state"
    #       fi
    #       done

    #       # Wait for the marker file indicating userdata completion
    #       userdata_complete=""
    #       instance_ip=$(terraform output -raw ec2_server_ip)
    #       echo "${{ secrets.LOGIN_SSH_PRI_KEY }}" > private_key && chmod 600 private_key
    #       login_attempts=0
    #       max_login_attempts=5  # Adjust as needed
    #       while [ -z "$userdata_complete" ]; do
    #         if [ $login_attempts -eq $max_login_attempts ]; then
    #           echo "Max login attempts reached. Exiting..."
    #           exit 1
    #         fi
    #         login_attempts=$((login_attempts + 1))
    #         echo "Attempt $login_attempts to SSH into the instance..."
    #         ssh_output=$(ssh -o StrictHostKeyChecking=no -i private_key deploy@${instance_ip} '[ -f /home/deploy/deploy_complete.txt ] && echo "true" || echo ""' 2>&1)
    #         if [ $? -eq 0 ]; then
    #           userdata_complete=$(echo "$ssh_output" | grep "true")
    #           if [ -z "$userdata_complete" ]; then
    #             echo "Userdata not yet completed, waiting..."
    #             sleep 10
    #           else
    #             echo "Userdata completed"
    #           fi
    #         else
    #           echo "Error: Failed to SSH into the instance. Retrying..."
    #           sleep 10
    #         fi
    #       done

      - name: Teraform Apply Status Check
        if: steps.terraform-apply.outcome == 'failure'
        run: |
          exit 1

#   code-deploy:
#     name: Code Deploy
#     needs:
#       - env-selector
#       - infra-deploy
#     runs-on: ubuntu-latest
#     environment:
#       name: ${{needs.env-selector.outputs.env}}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
#           aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#           aws-region: "${{ secrets.AWS_REGION }}"

#       - name: Build & Deploy of ecommpulse backend code
#         env:
#           PRIVATE_KEY: |
#             ${{ secrets.LOGIN_SSH_PRI_KEY }}
#           HOSTNAME: ${{ needs.infra-deploy.outputs.ecommpulse_backend_server_ip }}
#           USER_NAME: "deploy"
#           APP_ENV: ${{needs.env-selector.outputs.env}}
#         run: |
#           ecommpulse_backend_server_ip=$(echo ${{ needs.infra-deploy.outputs.ecommpulse_backend_server_ip }} | sed 's/"//g')
#           APP_ENV=$(echo ${{needs.env-selector.outputs.env }})
#           echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
#           ssh -o StrictHostKeyChecking=no -i private_key deploy@${ecommpulse_backend_server_ip} '
#             mkdir -p /home/deploy/.aws
#             cd /home/deploy/.aws
#             printf "[default] \n aws_access_key_id = %s \n aws_secret_access_key = %s" ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }} > credentials
#             printf "[default] \n region = %s" ${{ secrets.AWS_REGION }} > config
#             DEST_DIR="/opt/ecommpulse/apps"
#             mkdir -p $DEST_DIR
#             cd $DEST_DIR
#             if [ ! -d "ecomm-pulse-backend" ]; then
#               GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" && git clone git@github.com:Edugem-Technologies/ecomm-pulse-backend.git
#             fi
#             wait
#             cd ecomm-pulse-backend
#             git checkout "${{ needs.env-selector.outputs.env }}"
#             git stash
#             git pull
#             echo 'ecomm-pulse-admin:\$apr1\$7pDQk8T6\$'${{secrets.SWAGGER_AUTH_KEY}} > .htpasswd
#             echo "export APP_ENV=$APP_ENV" >> ~/.bashrc
#             source ~/.bashrc
#             sudo chmod 744 deploy.sh
#             ./deploy.sh
#             '
